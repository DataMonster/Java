package mercury;

import java.util.LinkedList;

public class test2 {

	public static Double getResult(String s) {
		LinkedList<String> list = new LinkedList<String>();
		StringBuffer sb = new StringBuffer();
		s = s.replaceAll(" ", "");

		try{
		for (int i = 0; i < s.length(); i++) {
			char temp = s.charAt(i);
			if (temp == '+' || temp == '-' || temp == '*' || temp == '/') {
				// first add values to the list then add the operator to the
				// list
				String num = sb.toString();
				if (num.length() < 1) {
					list.add("0");
				} else {
					list.add(num);
				}
				sb.delete(0, sb.length());
				list.add(String.valueOf(temp));
			} else {
				// if i is not reaching to the end of the string, append the
				// number to stringbuffer
				if (i != s.length() - 1) {
					sb.append(temp);
				} else {
					// i is the end of the string, add the value to list
					sb.append(temp);
					String num = sb.toString();
					if (num.length() < 1) {
						list.add("0");
					} else {
						list.add(num);
					}
					sb.delete(0, sb.length());
				}
			}
		}
		}
		catch(Exception ex){
			System.out.println("the input string contains illegal character");
			return null;
		}
		
		for (int i = 0; i < list.size(); i++) {
			System.out.print(list.get(i) + " ");

		}
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i).equals("*")) {
				double temp = Double.parseDouble(list.get(i - 1))
						* Double.parseDouble(list.get(i + 1));
				System.out.println("!" + temp);
				list.set(i - 1, String.valueOf(temp));
				list.remove(i);
				list.remove(i);
				i--;
			} else if (list.get(i).equals("/")) {
				double temp = Double.parseDouble(list.get(i - 1))
						/ Double.parseDouble(list.get(i + 1));
				System.out.println("!" + temp);
				list.set(i - 1, String.valueOf(temp));
				list.remove(i);
				list.remove(i);
				i--;
			}
		}
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i).equals("+")) {
				double temp = Double.parseDouble(list.get(i - 1))
						+ Double.parseDouble(list.get(i + 1));
				System.out.println("?" + temp);
				list.set(i - 1, String.valueOf(temp));
				list.remove(i);
				list.remove(i);
				i--;
			} else if (list.get(i).equals("-")) {
				double temp = Double.parseDouble(list.get(i - 1))
						- Double.parseDouble(list.get(i + 1));
				System.out.println("?" + temp);
				list.set(i - 1, String.valueOf(temp));
				list.remove(i);
				list.remove(i);
				i--;
			}

		}
		for (int i = 0; i < list.size(); i++) {
			System.out.print(list.get(i) + " ");

		}
		//keep only one digit after dot. 12.5000000001->12.5;
		double result = (double) Math
				.round(Double.parseDouble(list.get(0)) * 10) / 10;
		return result;
	}

	public static void main(String[] args) {
		//test 1: "5.6/0.7*2-3.5"
		System.out.print(getResult("5.6/0.7*2-3.5"));
	
		//-1.3 + 5.1 / 3 ¨C 0.8
		System.out.print(getResult("-1.3 + 5.1 / 3 - 0.8"));
		// DecimalFormat df = new DecimalFormat("#.00");
	}

}
