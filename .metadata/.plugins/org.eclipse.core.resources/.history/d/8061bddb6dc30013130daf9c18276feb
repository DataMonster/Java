package edu.java.chap11;

import java.util.Arrays;
import java.util.BitSet;
import java.util.LinkedList;
import java.util.TreeMap;

/*
 * Write a method to sort an array of strings so that all the anagrams are next
 * to each other.
 */

public class SortStrings {
	
	public static void sort(String[] arr){
		TreeMap<Integer,LinkedList<String>> tm = new TreeMap<Integer,LinkedList<String>>();
		for(int i = 0;i<arr.length;i++){
			int len = arr[i].length();
			if(tm.containsKey(len)){
				LinkedList<String> temp = new LinkedList<String>();
				for(int j=0;j<temp.size();j++ ){
					
				}
			}
			
		}
		
	}
	
	public static boolean checkAnagrams(String a, String b){
		BitSet bs = new BitSet(255);
		for(int i =0;i<a.length();i++){
			System.out.println(bs.get(a.charAt(i)));
			
		}
		
		return false;
	}

	public static void main(String[] args) {
		String[] arr  = {"abe","a","ab","est","-ab","abc","abd","acd","abcd","abcde"};
		for(int i =0;i<arr.length;i++){
			//System.out.println(arr[i]);
		}
		
		System.out.println("========");
		Arrays.sort(arr);
		for(int i =0;i<arr.length;i++){
			//System.out.println(arr[i]);
		}
		
		LinkedList<String> temp = new LinkedList<String>();
		temp.add("1");
		temp.add("2");
		temp.add("3");
		temp.add(1, "0");
		System.out.println(temp.get(1));
		
		checkAnagrams("aab","asd");
	}

}
